service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin



frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    BUCKET: ary-my-bucket #yw-uda-serverless-app

  tracing:
    lambda: true
    apiGateway: true

  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET}'



functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}



  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/create-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/update-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BUCKET}/*

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # MyBucket:
    #   Type: 'AWS::S3::Bucket'
    #   Properties:
    #     BucketName: ${self:provider.environment.BUCKET}
    #     PublicAccessBlockConfiguration:
    #       BlockPublicAcls: false
    #       BlockPublicPolicy: false
    #       IgnorePublicAcls: false
    #       RestrictPublicBuckets: false

    # MyBucketPolicy:
    #   Type: 'AWS::S3::BucketPolicy'
    #   Properties:
    #         Bucket:
    #           Ref: 'MyBucket'
    #         PolicyDocument:
    #             Version: '2012-10-17'
    #             Statement:
    #               - Effect: Allow
    #                 Principal: '*'
    #                 Action: 's3:*'
    #                 Resource:
    #                   Fn::Join:
    #                     - ''
    #                     - - 'arn:aws:s3:::'
    #                       - Ref: 'MyBucket'
    #                       - '/*'




    # MyWebBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.BUCKET}
    #     AccessControl: PublicRead
    #     PublicAccessBlockConfiguration:
    #       BlockPublicAcls: false
    #       BlockPublicPolicy: false
    #       IgnorePublicAcls: false
    #       RestrictPublicBuckets: false
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedOrigins:
    #             - "*"
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #           AllowedHeaders:
    #             - "*"
    #           MaxAge: 3000

    # MyWebBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref MyWebBucket
    #     PolicyDocument:
    #       Statement:
    #         - Sid: AllowAccessFromSpecificURL
    #           Effect: Allow
    #           Principal: '*'
    #           Action:
    #             - s3:*
    #           Resource:
    #             Fn::Join:
    #               - ''
    #               - - 'arn:aws:s3:::'
    #                 - Ref: 'MyWebBucket'
    #                 - '/*'
    #           Condition:
    #             StringLike:
    #               aws:Referer:
    #                 - 'http://localhost:3000/*'
